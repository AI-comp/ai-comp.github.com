// Generated by CoffeeScript 1.6.2
var Button, Engine, Event, Page, Parts, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Event = (function() {
  Event.x;

  Event.y;

  Event.length;

  Event.prototype.multX = [];

  Event.prototype.multY = [];

  function Event(length, multX, multY) {
    this.length = length;
    this.multX = multX;
    this.multY = multY;
    this.x = this.multX[0];
    this.y = this.multY[0];
    return;
  }

  return Event;

})();

Page = (function() {
  Page.prototype.parts = {};

  Page.prototype._jumpScene = null;

  Page.prototype.gameUpdate = function() {};

  function Page(Game) {
    this.Game = Game;
  }

  Page.prototype.init = function() {
    this._jumpScene = null;
  };

  Page.prototype.draw = function(ctx) {};

  Page.prototype.touchStartEvent = function(e) {};

  Page.prototype.touchMoveEvent = function(e) {};

  Page.prototype.touchEndEvent = function() {};

  return Page;

})();

Parts = (function() {
  function Parts(Scene) {
    this.Scene = Scene;
  }

  Parts.prototype.draw = function(ctx) {
    ctx.globalAlpha = 1.0;
    ctx.shadowBlur = 0;
    ctx.shadowColor = 'rgba(0,0,0,0)';
    ctx.textAlign = 'start';
  };

  return Parts;

})();

Button = (function(_super) {
  __extends(Button, _super);

  function Button() {
    _ref = Button.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Button.prototype.press = function(e) {
    var _ref1, _ref2;

    return this.active = (this.x <= (_ref1 = e.x) && _ref1 < this.x + this.w) && (this.y <= (_ref2 = e.y) && _ref2 < this.y + this.h);
  };

  return Button;

})(Parts);

Engine = (function() {
  var draw, load, loadLoop, mainLoop, openingDraw, update;

  function Engine() {
    this.mouseUpListener = __bind(this.mouseUpListener, this);
    this.mouseMoveListener = __bind(this.mouseMoveListener, this);
    this.mouseDownListener = __bind(this.mouseDownListener, this);
    this.init = __bind(this.init, this);
  }

  Engine.prototype.init = function(page, currentPage) {
    var objBody;

    this.page = page;
    this.WIDTH = 960;
    this.HEIGHT = 720;
    this.WAIT = 30;
    this.images = {};
    this.imageLoadCount = 0;
    Engine.prototype.currentPage = currentPage;
    this.canvas = document.createElement('canvas');
    objBody = document.getElementsByTagName("body").item(0);
    objBody.appendChild(this.canvas);
    this.ctx = this.canvas.getContext('2d');
    this.canvas.id = 'MainCanvas';
    this.canvas.width = this.WIDTH;
    this.canvas.height = this.HEIGHT;
    this.canvas.style.cssText = 'position:absolute;top: 0px;left: 0px;z-index: 1;';
    this.canvas.addEventListener('mousedown', Engine.prototype.mouseDownListener, false);
    this.canvas.addEventListener('mousemove', Engine.prototype.mouseMoveListener, false);
    return this.canvas.addEventListener('mouseup', Engine.prototype.mouseUpListener, false);
  };

  Engine.prototype.run = function() {
    load();
    this.loadLoopTimer = setInterval(loadLoop, this.WAIT);
    return this.mainLoopTimer = setInterval(mainLoop, this.WAIT);
  };

  /*
  #load
  */


  load = function() {
    return this.isLoad = true;
  };

  loadLoop = function() {
    if (this.isLoad) {
      return clearInterval(this.loadLoopTimer);
    }
  };

  Engine.prototype.loadImage = function(fileName) {
    var _this = this;

    this.images[fileName] = new Image();
    this.images[fileName].onload = function() {
      return ++_this.imageLoadCount;
    };
    this.image[fileName].src = fileName;
    return this.image[fileName];
  };

  /*
  #main loop
  */


  mainLoop = function() {
    if (!this.isLoad) {
      openingDraw();
      return;
    }
    update();
    draw();
  };

  update = function() {
    ++this.frameCount;
    return this.currentPage.update();
  };

  openingDraw = function() {};

  draw = function() {
    this.ctx.clearRect(0, 0, this.WIDTH, this.HEIGHT);
    this.currentPage.draw(this.ctx);
  };

  /*
  # controller
  */


  Engine.prototype.mouseDownListener = function(e) {
    var event, multX, multY;

    multX = [e.pageX];
    multY = [e.pageY];
    event = new Event(1, multX, multY);
    Engine.prototype.currentPage.touchStartEvent(event);
    e.preventDefault();
  };

  Engine.prototype.mouseMoveListener = function(e) {
    var event, multX, multY;

    multX = [e.pageX];
    multY = [e.pageY];
    event = new Event(1, multX, multY);
    Engine.prototype.currentPage.touchMoveEvent(event);
    e.preventDefault();
  };

  Engine.prototype.mouseUpListener = function(e) {
    Engine.prototype.currentPage.touchEndEvent();
    e.preventDefault();
  };

  return Engine;

})();
