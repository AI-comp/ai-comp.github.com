// Generated by CoffeeScript 1.6.2
var Field, Hex, Random, Terraforming, Tile,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Terraforming = (function(_super) {
  __extends(Terraforming, _super);

  function Terraforming() {
    this.parts = {};
    this.parts.hex = new Hex(this);
  }

  Terraforming.prototype.update = function() {};

  Terraforming.prototype.draw = function() {};

  Terraforming.prototype.touchStartEvent = function(e) {};

  Terraforming.prototype.touchMoveEvent = function(e) {};

  return Terraforming;

})(Page);

Random = (function() {
  function Random() {}

  Random.prototype.int = function(n) {
    return Math.floor(Math.random() * n);
  };

  return Random;

})();

Tile = (function() {
  function Tile(x, y) {
    this.x = x;
    this.y = y;
    this.owner = -1;
    this.robots = 0;
    this.movedrobots = 0;
    this.additionalScore = 0;
    this.installation = 'None';
    this.isHole = false;
  }

  return Tile;

})();

Field = (function() {
  function Field() {}

  Field.field = {};

  Field.radius = 7;

  Field.prototype.generate = function() {
    var rand, x, y, _i, _ref, _results;

    rand = new Random();
    _results = [];
    for (y = _i = 0, _ref = this.radius; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
      _results.push((function() {
        var _j, _ref1, _ref2, _results1;

        _results1 = [];
        for (x = _j = _ref1 = -y + 1, _ref2 = -y + this.radius; _ref1 <= _ref2 ? _j < _ref2 : _j > _ref2; x = _ref1 <= _ref2 ? ++_j : --_j) {
          if (rand.int(5) === 0) {
            _results1.push(this.field["" + x + "," + y].isHole = true);
          } else {
            _results1.push(this.field["" + x + "," + y].isHole = true);
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  return Field;

})();

Hex = (function(_super) {
  __extends(Hex, _super);

  function Hex() {}

  Hex.prototype.draw = function(ctx) {};

  return Hex;

})(Parts);
